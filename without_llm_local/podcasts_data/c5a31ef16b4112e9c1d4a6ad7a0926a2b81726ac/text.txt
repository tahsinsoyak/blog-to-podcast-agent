Artificial Bee Colony (ABC): A Comprehensive Guide Tahsin Soyak Follow 2 min read · Aug 11, 2024 -- Listen Share

The Artificial Bee Colony (ABC) algorithm is a swarm-based search algorithm inspired by the foraging behavior of honey bees. Developed by Prof. Dr. Derviş Karaboğa, this algorithm is used to solve optimization problems by simulating the intelligent foraging behavior of bees.

Bee

Key Concepts

Initialization: Generate initial random solutions (food sources). Employed Bees Phase: Each employed bee searches for new solutions near their current food source. Onlooker Bees Phase: Onlooker bees choose food sources based on the quality of the food source and search for new solutions. Scout Bees Phase: If a food source is abandoned, a scout bee searches for a new random food source. Termination: Repeat the employed, onlooker, and scout phases until a stopping criterion is met.

Example Code

Here’s a simple implementation of the Artificial Bee Colony algorithm in Python:

import random



def objective_function(x):

return sum([xi**2 for xi in x])



def initialize_population(pop_size, bounds):

population = []

for _ in range(pop_size):

individual = [random.uniform(b[0], b[1]) for b in bounds]

population.append(individual)

return population



def get_neighbors(solution, bounds):

neighbor = solution[:]

idx = random.randint(0, len(bounds) - 1)

neighbor[idx] = random.uniform(bounds[idx][0], bounds[idx][1])

return neighbor



def bee_algorithm(func, bounds, pop_size=10, max_iter=1000):

population = initialize_population(pop_size, bounds)

fitness = [func(ind) for ind in population]



for _ in range(max_iter):

# Employed bees phase

for i in range(pop_size):

neighbor = get_neighbors(population[i], bounds)

neighbor_fitness = func(neighbor)

if neighbor_fitness < fitness[i]:

population[i] = neighbor

fitness[i] = neighbor_fitness



# Onlooker bees phase

fitness_sum = sum(fitness)

probabilities = [f / fitness_sum for f in fitness]

for i in range(pop_...